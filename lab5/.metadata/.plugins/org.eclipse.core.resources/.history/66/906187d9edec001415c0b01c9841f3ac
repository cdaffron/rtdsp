// Welch, Wright, & Morrow, 
// Real-time Digital Signal Processing, 2011

///////////////////////////////////////////////////////////////////////
// Filename: ISRs.c
//
// Synopsis: Interrupt service routine for codec data transmit/receive
//
///////////////////////////////////////////////////////////////////////

#include "DSP_Config.h" 
#include "coeff.h"
  
// Data is received as 2 16-bit words (left/right) packed into one
// 32-bit word.  The union allows the data to be accessed as a single 
// entity when transferring to and from the serial port, but still be 
// able to manipulate the left and right channels independently.

#define LEFT  0
#define RIGHT 1

volatile union {
	Uint32 UINT;
	Int16 Channel[2];
} CodecDataIn, CodecDataOut;

//float section[nSections][3] = { {0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}};

//float w[nSections][3] = { {0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}};

float delayed[N + 1] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};

//int sDataBase = 0;
//float workingData = 0.0f;

int i;


interrupt void Codec_ISR()
///////////////////////////////////////////////////////////////////////
// Purpose:   Codec interface interrupt service routine  
//
// Input:     None
//
// Returns:   Nothing
//
// Calls:     CheckForOverrun, ReadCodecData, WriteCodecData
//
// Notes:     None
///////////////////////////////////////////////////////////////////////
{                    
	/* add any local variables here */
    int sTemp;
    float left = 0.0f;
    float right = 0.0f;
    float out = 0.0f;
    float currentIn = 0.0f;

 	if(CheckForOverrun())					// overrun error occurred (i.e. halted DSP)
		return;								// so serial port is reset to recover

  	CodecDataIn.UINT = ReadCodecData();		// get input data samples
  	currentIn = CodecDataIn.Channel[LEFT];
  	delayed[0] = currentIn;

  	left = delayed[0];

  	for(i = 1; i < N; i++)
  	{
  		left -= (A[i] * delayed[i]);
  	}

  	delayed[0] = left;

  	for(i = 0; i < N; i++)
  	{
  		right += ( B[i] * delayed[i] );
  	}

//  	for(i = 1; i < N; i++)
//  	{
//  		left += delayed[i] * (-(A[i]));
//  		right += delayed[i] * B[i];
//  	}

//  	out = ( ( delayed[0] + left ) * ( B[0] ) ) + right;

  	for(i = N; i > 0; i--)
  		delayed[i] = delayed[i-1];

  	CodecDataOut.Channel[LEFT] = right;

	WriteCodecData(CodecDataOut.UINT);		// send output data to  port

	return;
}

